name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: cd backend && npm ci
    
    - name: Run backend linting
      run: cd backend && npm run lint
    
    - name: Run backend tests with coverage
      run: cd backend && npm run test:ci
      env:
        MONGODB_URI: mongodb://localhost:27017/autocomplete-test
        NODE_ENV: test
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: cd frontend && npm ci
    
    - name: Run frontend linting
      run: cd frontend && npm run lint
    
    - name: Run frontend tests with coverage
      run: cd frontend && npm run test:ci
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        cd ../e2e && npm ci
    
    - name: Install Playwright browsers
      run: cd e2e && npx playwright install --with-deps
    
    - name: Seed test data
      run: cd backend && npm run seed:sample
      env:
        MONGODB_URI: mongodb://localhost:27017/autocomplete-test
        NODE_ENV: test
    
    - name: Run E2E tests
      run: cd e2e && npm run test
      env:
        MONGODB_URI: mongodb://localhost:27017/autocomplete-test
        NODE_ENV: test
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: e2e/playwright-report/
        retention-days: 30

  load-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Install dependencies and seed data
      run: |
        npm ci
        cd backend && npm ci && npm run seed:sample
        cd ../frontend && npm ci
        cd ../load-tests && npm ci
      env:
        MONGODB_URI: mongodb://localhost:27017/autocomplete-test
        NODE_ENV: test
    
    - name: Start application
      run: |
        cd backend && npm run dev &
        cd frontend && npm run dev &
        sleep 30
      env:
        MONGODB_URI: mongodb://localhost:27017/autocomplete-test
        NODE_ENV: test
    
    - name: Run basic load tests
      run: cd load-tests && npm run test
    
    - name: Run stress tests
      run: cd load-tests && npm run test:stress
    
    - name: Run spike tests
      run: cd load-tests && npm run test:spike
      continue-on-error: true  # Spike tests may fail under extreme load
    
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results
        path: load-tests/*.json

  performance-benchmarks:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Run performance benchmarks
      run: cd backend && npm run test:performance
      env:
        MONGODB_URI: mongodb://localhost:27017/autocomplete-test
        NODE_ENV: test
    
    - name: Run regression tests
      run: cd backend && npm test tests/regression/
      env:
        MONGODB_URI: mongodb://localhost:27017/autocomplete-test
        NODE_ENV: test
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmarks
        path: backend/tests/regression/performance-*.json

  accessibility-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        cd ../e2e && npm ci
    
    - name: Install Playwright browsers
      run: cd e2e && npx playwright install --with-deps
    
    - name: Seed test data
      run: cd backend && npm run seed:sample
      env:
        MONGODB_URI: mongodb://localhost:27017/autocomplete-test
        NODE_ENV: test
    
    - name: Run accessibility tests
      run: cd e2e && npm run test:a11y
      env:
        MONGODB_URI: mongodb://localhost:27017/autocomplete-test
        NODE_ENV: test
    
    - name: Upload accessibility results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: accessibility-report
        path: e2e/test-results/

  coverage-report:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Generate comprehensive coverage report
      run: node scripts/coverage-report.js
      env:
        MONGODB_URI: mongodb://localhost:27017/autocomplete-test
        NODE_ENV: test
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: coverage-reports/
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const reportFiles = fs.readdirSync('coverage-reports');
            const jsonReport = reportFiles.find(f => f.endsWith('.json'));
            
            if (jsonReport) {
              const report = JSON.parse(fs.readFileSync(path.join('coverage-reports', jsonReport), 'utf8'));
              
              if (report.summary.overall) {
                const overall = report.summary.overall;
                const comment = `## ðŸ“Š Coverage Report
                
**Overall Coverage:**
- Statements: ${overall.statements.percentage.toFixed(2)}%
- Functions: ${overall.functions.percentage.toFixed(2)}%
- Branches: ${overall.branches.percentage.toFixed(2)}%

**Backend:** ${report.summary.backend ? report.summary.backend.statements.percentage.toFixed(2) : 'N/A'}% | **Frontend:** ${report.summary.frontend ? report.summary.frontend.statements.percentage.toFixed(2) : 'N/A'}%`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }
          } catch (error) {
            console.log('Could not post coverage comment:', error);
          }

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, e2e-tests, performance-benchmarks, accessibility-tests, coverage-report]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Build application
      run: npm run build:prod
    
    - name: Run production validation
      run: npm run validate:prod
    
    # Add deployment steps here based on your deployment target
    # - name: Deploy to staging/production
    #   run: npm run deploy:prod